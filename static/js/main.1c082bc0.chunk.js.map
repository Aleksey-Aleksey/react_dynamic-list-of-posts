{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","utils/api.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","setIsForm","selectedPost","setSelectedPost","className","map","el","id","title","type","classNames","onClick","post","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","handleCommentAdd","useState","authorName","setAuthorName","isNameError","setIsNameError","email","setEmail","isEmailError","setIsEmailError","commentText","setCommentText","isCommentError","setIsCommentError","isLoading","setIsLoading","isResponseError","setIsResponseError","onSubmit","event","preventDefault","trim","comment","newComment","postId","name","resp","catch","finally","htmlFor","placeholder","value","onChange","target","PostDetails","isForm","comments","setComments","isLoadComment","setIsLoadComment","isLoadError","setIsLoadError","isDeleteError","setIsDeleteError","useEffect","handleDeleteComment","commentId","service","filter","length","commentBody","href","UserSelector","handleListDropDown","selectedUser","isDropDownList","setIsDropDownList","users","handleChoseUser","onBlur","role","cn","App","setUsers","setPosts","setSelectedUser","isError","setIsError","use","user","pos","ReactDOM","render","document","getElementById"],"mappings":"+QAWaA,EAA6B,SAAC,GAKpC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,aACAC,EACI,EADJA,gBAWA,OACE,sBAAK,UAAQ,YAAb,UACE,mBAAGC,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGJ,EAAMK,KAAI,SAAAC,GAAE,OACX,qBAAI,UAAQ,OAAZ,UACE,oBAAI,UAAQ,SAAZ,SAAsBA,EAAGC,KAEzB,oBAAI,UAAQ,YAAZ,SACGD,EAAGE,QAGN,oBAAIJ,UAAU,8BAAd,SACE,wBACEK,KAAK,SACL,UAAQ,aACRL,UAAWM,IAAW,iBAAkB,CACtC,YAAwB,OAAZR,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOD,EAAGC,KAEtCI,QAAS,kBAtCGC,EAsCsBN,QArChC,OAAZJ,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOK,EAAKL,IAC5BJ,EAAgBS,GAChBX,GAAU,IAEVE,EAAgB,OALO,IAACS,GAgCd,UAQe,OAAZV,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOD,EAAGC,GAAK,QAAU,aAhBtBD,EAAGC,gB,OCvC1BM,G,MAAS,kBACpB,qBAAKT,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCJbU,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIZ,GAAJ,OAAoBD,EAAWC,IADzBY,EAEL,SAAIZ,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDU,EAIH,SAACZ,GAAD,OAAiBD,EAAQC,EAAK,WC1B3Ba,EAAkC,SAAC,GAGzC,IAFLC,EAEI,EAFJA,iBACAjC,EACI,EADJA,aAEA,EAAoCkC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAwCN,oBAAS,GAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEA,EAAsCR,mBAAS,IAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KACA,EAA4CV,oBAAS,GAArD,mBAAOW,EAAP,KAAuBC,EAAvB,KAEA,EAAkCZ,oBAAS,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KACA,EAA8Cd,oBAAS,GAAvD,mBAAOe,EAAP,KAAwBC,EAAxB,KAwEA,OACE,uBAAM,UAAQ,iBAAiBC,SA3CZ,SAACC,GAepB,GAdAA,EAAMC,iBAEDlB,EAAWmB,QACdhB,GAAe,GAGZC,EAAMe,QACTZ,GAAgB,GAGbC,EAAYW,QACfR,GAAkB,GAGfX,EAAWmB,QAAWX,EAAYW,QAAWf,EAAMe,OAAxD,CAIAhB,GAAe,GACfI,GAAgB,GAChBI,GAAkB,GAClBE,GAAa,GAEb,IC1DuBO,ED0DjBC,EAAa,CACjBC,OAAQzD,EAAaK,GACrBqD,KAAMvB,EACNI,QACAhB,KAAMoB,IC9DeY,EDiEJC,EChEdzB,EAAqB,YAAawB,IDiEpC5B,MAAK,SAACgC,GACL1B,EAAiB0B,GACjBf,EAAe,OAEhBgB,OAAM,kBAAMV,GAAmB,MAC/BW,SAAQ,WACPb,GAAa,QAKjB,UACE,sBAAK9C,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQ4D,QAAQ,sBAAjC,yBAIA,sBAAK5D,UAAU,yCAAf,UACE,uBACEK,KAAK,OACLmD,KAAK,OACLrD,GAAG,sBACH0D,YAAY,eACZ7D,UAAWM,IAAW,QAAS,CAC7B,YAAa6B,IAEf2B,MAAO7B,EACP8B,SA5Ee,SAACb,GACxBhB,EAAcgB,EAAMc,OAAOF,OAC3B1B,GAAe,MA6ET,sBAAMpC,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAEdmC,GACC,sBACEnC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBmC,GACC,mBAAGnC,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQ4D,QAAQ,uBAAjC,0BAIA,sBAAK5D,UAAU,yCAAf,UACE,uBACEK,KAAK,OACLmD,KAAK,QACLrD,GAAG,uBACH0D,YAAY,iBACZ7D,UAAWM,IAAW,QAAS,CAC7B,YAAaiC,IAEfuB,MAAOzB,EACP0B,SA7GgB,SAACb,GACzBZ,EAASY,EAAMc,OAAOF,OACtBtB,GAAgB,MA8GV,sBAAMxC,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGduC,GACC,sBACEvC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBuC,GACC,mBAAGvC,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQ4D,QAAQ,eAAjC,0BAIA,qBAAK5D,UAAU,UAAf,SACE,0BACEG,GAAG,eACHqD,KAAK,OACLK,YAAY,oBACZ7D,UAAWM,IAAW,WAAY,CAChC,YAAaqC,IAEfmB,MAAOrB,EACPsB,SA9IkB,SAC1Bb,GAEAR,EAAeQ,EAAMc,OAAOF,OAC5BlB,GAAkB,QA8IbD,GACC,mBAAG3C,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEK,KAAK,SACLL,UAAWM,IAAW,iBAAkB,CACtC,aAAcuC,IAHlB,mBAUF,qBAAK7C,UAAU,UAAf,SAEE,wBACEK,KAAK,QACLL,UAAU,0BACVO,QA/LU,WAClBuC,GAAa,GACbE,GAAmB,GACnBd,EAAc,IACdI,EAAS,IACTI,EAAe,IACfN,GAAe,GACfI,GAAgB,GAChBI,GAAkB,IAoLZ,qBASDG,GACC,mBAAG/C,UAAU,iBAAiB,UAAQ,eAAtC,6DEpNGiE,EAA+B,SAAC,GAItC,IAHLnE,EAGI,EAHJA,aACAoE,EAEI,EAFJA,OACArE,EACI,EADJA,UAEA,EAAgCmC,mBAAoB,IAApD,mBAAOmC,EAAP,KAAiBC,EAAjB,KACA,EAA0CpC,oBAAS,GAAnD,mBAAOqC,EAAP,KAAsBC,EAAtB,KACA,EAAsCtC,oBAAS,GAA/C,mBAAOuC,EAAP,KAAoBC,EAApB,KACA,EAA0CxC,oBAAS,GAAnD,mBAAOyC,EAAP,KAAsBC,EAAtB,KAEQrD,EAAoBvB,EAApBuB,KAAMlB,EAAcL,EAAdK,GAAIC,EAAUN,EAAVM,MAElBuE,qBAAU,WDZe,IAACpB,ECaxBe,GAAiB,IDbOf,ECeJpD,EDdf0B,EAAA,2BAA0C0B,KCe5C9B,KAAK2C,GACLV,OAAM,kBAAMc,GAAe,MAC3Bb,SAAQ,kBAAMW,GAAiB,QACjC,CAACnE,IAEJ,IAIMyE,EAAsB,SAACC,GAC3BH,GAAiB,GDtBQ,SAACvE,GAC5B,OAAO0B,EAAA,oBAA2B1B,ICuBhC2E,CAAsBD,GACnBpD,MAAK,WACJ2C,GAAY,SAAAlE,GAAE,OAAIA,EAAG6E,QACnB,SAAA1B,GAAO,OAAIA,EAAQlD,KAAO0E,WAG7BnB,OAAM,WACLgB,GAAiB,OAIvB,OACE,qBAAK1E,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,oBACOG,EADP,aACcC,KAGd,mBAAG,UAAQ,WAAX,SACGiB,OAIL,sBAAKrB,UAAU,QAAf,UACGqE,GACC,cAAC,EAAD,IAGDE,GACC,qBAAKvE,UAAU,yBAAyB,UAAQ,gBAAhD,mCAKAmE,EAASa,SAAWX,GACpB,mBAAGrE,UAAU,aAAa,UAAQ,oBAAlC,6BAKDmE,EAASa,OAAS,IAAMX,GACvB,qCACE,mBAAGrE,UAAU,aAAb,uBAECmE,EAASlE,KAAI,gBACNgF,EADM,EACZ5D,KACAgB,EAFY,EAEZA,MACIwC,EAHQ,EAGZ1E,GACAqD,EAJY,EAIZA,KAJY,OAMZ,0BACExD,UAAU,mBACV,UAAQ,UAFV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBAAGkF,KAAI,iBAAY7C,GAAS,UAAQ,gBAApC,SACGmB,IAEH,wBACE,UAAQ,gBACRnD,KAAK,SACLL,UAAU,kBACV,aAAW,SACXO,QAAS,kBAAMqE,EAAoBC,IALrC,8BAWF,qBAAK7E,UAAU,eAAe,UAAQ,cAAtC,SACGiF,MAlBEJ,SAyBZJ,GACC,mBAAGzE,UAAU,iBAAiB,UAAQ,eAAtC,gDAKAkE,IAAWG,GACX,wBACE,UAAQ,qBACRhE,KAAK,SACLL,UAAU,iBACVO,QAAS,kBAAMV,GAAU,IAJ3B,gCAWHqE,GACC,cAAC,EAAD,CACEnC,iBA1Ge,SAACuB,GACxBc,EAAY,GAAD,mBAAKD,GAAL,CAAeb,MA0GlBxD,aAAcA,UChIbqF,EAAgC,SAAC,GAOvC,IANLC,EAMI,EANJA,mBACAC,EAKI,EALJA,aACAC,EAII,EAJJA,eACAC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,MACAC,EACI,EADJA,gBAEA,OACE,sBACE,UAAQ,eACRzF,UAAU,qBAFZ,UAIE,qBAAKA,UAAU,mBAAf,SACE,yBACEK,KAAK,SACLL,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdO,QAAS6E,EACTM,OAAQ,kBAAM3E,YAAW,kBAAMwE,GAAkB,KAAQ,MAN3D,UAQGF,EACC,+BAAOA,EAAa7B,OAEpB,iDAGF,sBAAMxD,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKlDsF,GACC,qBAAKtF,UAAU,gBAAgBG,GAAG,gBAAgBwF,KAAK,OAAvD,SACE,qBACE3F,UAAU,mBADZ,SAGGwF,EAAMvF,KAAI,SAAAC,GAAE,OACX,mBACEgF,KAAK,UACLlF,UAAW4F,IAAG,gBAAiB,CAC7B,aAAyB,OAAZP,QAAY,IAAZA,OAAA,EAAAA,EAAclF,MAAOD,EAAGC,KAEvCI,QAAS,kBAAMkF,EAAgBvF,IALjC,SAOGA,EAAGsD,kBC9CPqC,EAAgB,WAC3B,MAAkC7D,oBAAS,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KACA,EAA4Cd,oBAAS,GAArD,mBAAOsD,EAAP,KAAuBC,EAAvB,KACA,EAA0BvD,mBAAiB,IAA3C,mBAAOwD,EAAP,KAAcM,EAAd,KACA,EAA0B9D,mBAAiB,IAA3C,mBAAOpC,EAAP,KAAcmG,EAAd,KACA,EAAwC/D,mBAAsB,MAA9D,mBAAOqD,EAAP,KAAqBW,EAArB,KACA,EAAwChE,mBAAsB,MAA9D,mBAAOlC,EAAP,KAAqBC,EAArB,KACA,EAA4BiC,oBAAS,GAArC,mBAAOkC,EAAP,KAAerE,EAAf,KACA,EAA8BmC,oBAAS,GAAvC,mBAAOiE,EAAP,KAAgBC,EAAhB,KAEAvB,qBAAU,WHlBH9C,EAAmB,UGoBrBJ,MAAK,SAAA0E,GAAG,OAAIL,EAASK,QACvB,IAkBH,OACE,sBAAMnG,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEoF,mBAxBW,WACzBG,GAAmBD,IAwBLD,aAAcA,EACdC,eAAgBA,EAChBC,kBAAmBA,EACnBC,MAAOA,EACPC,gBAzBQ,SAACW,GHxBH,IAACjG,EGyBrB6F,EAAgBI,GAChBtD,GAAa,GACbyC,GAAkB,GAClBxF,EAAgB,OH5BKI,EG8BJiG,EAAKjG,GH7BjB0B,EAAA,wBAAoC1B,KG8BtCsB,MAAK,SAAA4E,GAAG,OAAIN,EAASM,MACrB3C,OAAM,kBAAMwC,GAAW,MACvBvC,SAAQ,kBAAMb,GAAa,WAoBpB,sBAAK9C,UAAU,QAAQ,UAAQ,cAA/B,WACIqF,GACA,mBAAG,UAAQ,iBAAX,8BAKDxC,GACC,cAAC,EAAD,IAGDoD,GACC,qBACEjG,UAAU,yBACV,UAAQ,oBAFV,mCAQDqF,IAAiBxC,GAA8B,IAAjBjD,EAAMoF,QACnC,qBACEhF,UAAU,0BACV,UAAQ,aAFV,0BAQDqF,GAAgBzF,EAAMoF,OAAS,IAAMiB,GACpC,cAAC,EAAD,CACErG,MAAOA,EACPC,UAAWA,EACXC,aAAcA,EACdC,gBAAiBA,YAO3B,qBACE,UAAQ,UACRC,UAAWM,IACT,OACA,YACA,eACA,UAAW,CACT,gBAAiBR,IAPvB,SAWE,qBAAKE,UAAU,gCAAf,SACGF,GACC,cAAC,EAAD,CACEA,aAAcA,EACdoE,OAAQA,EACRrE,UAAWA,gBCnH7ByG,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1c082bc0.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  setIsForm: (value: boolean) => void;\n  selectedPost: Post | null,\n  setSelectedPost: (value: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setIsForm,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const handleSelectedPost = (post: Post) => {\n    if (selectedPost?.id !== post.id) {\n      setSelectedPost(post);\n      setIsForm(false);\n    } else {\n      setSelectedPost(null);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(el => (\n            <tr data-cy=\"Post\" key={el.id}>\n              <td data-cy=\"PostId\">{el.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {el.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': selectedPost?.id !== el.id,\n                  })}\n                  onClick={() => handleSelectedPost(el)}\n                >\n                  {selectedPost?.id === el.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport * as service from '../utils/api';\n\ntype Props = {\n  handleCommentAdd: (value: Comment) => void;\n  selectedPost: Post,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleCommentAdd,\n  selectedPost,\n}) => {\n  const [authorName, setAuthorName] = useState('');\n  const [isNameError, setIsNameError] = useState(false);\n\n  const [email, setEmail] = useState('');\n  const [isEmailError, setIsEmailError] = useState(false);\n\n  const [commentText, setCommentText] = useState('');\n  const [isCommentError, setIsCommentError] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isResponseError, setIsResponseError] = useState(false);\n\n  const handleClear = () => {\n    setIsLoading(false);\n    setIsResponseError(false);\n    setAuthorName('');\n    setEmail('');\n    setCommentText('');\n    setIsNameError(false);\n    setIsEmailError(false);\n    setIsCommentError(false);\n  };\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAuthorName(event.target.value);\n    setIsNameError(false);\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n    setIsEmailError(false);\n  };\n\n  const handleCommentChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setCommentText(event.target.value);\n    setIsCommentError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!authorName.trim()) {\n      setIsNameError(true);\n    }\n\n    if (!email.trim()) {\n      setIsEmailError(true);\n    }\n\n    if (!commentText.trim()) {\n      setIsCommentError(true);\n    }\n\n    if (!authorName.trim() || !commentText.trim() || !email.trim()) {\n      return;\n    }\n\n    setIsNameError(false);\n    setIsEmailError(false);\n    setIsCommentError(false);\n    setIsLoading(true);\n\n    const newComment = {\n      postId: selectedPost.id,\n      name: authorName,\n      email,\n      body: commentText,\n    };\n\n    service.addComment(newComment)\n      .then((resp) => {\n        handleCommentAdd(resp);\n        setCommentText('');\n      })\n      .catch(() => setIsResponseError(true))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': isNameError,\n            })}\n            value={authorName}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isEmailError,\n            })}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isCommentError,\n            })}\n            value={commentText}\n            onChange={handleCommentChange}\n          />\n        </div>\n\n        {isCommentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n\n        {isResponseError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Unable to add comment, please try again.\n          </p>\n        )}\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from './fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (id: number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const addComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport * as service from '../utils/api';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post;\n  isForm: boolean;\n  setIsForm: (value: boolean) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  isForm,\n  setIsForm,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoadComment, setIsLoadComment] = useState(false);\n  const [isLoadError, setIsLoadError] = useState(false);\n  const [isDeleteError, setIsDeleteError] = useState(false);\n\n  const { body, id, title } = selectedPost;\n\n  useEffect(() => {\n    setIsLoadComment(false);\n\n    service.getComments(id)\n      .then(setComments)\n      .catch(() => setIsLoadError(true))\n      .finally(() => setIsLoadComment(false));\n  }, [id]);\n\n  const handleCommentAdd = (newComment: Comment) => {\n    setComments([...comments, newComment]);\n  };\n\n  const handleDeleteComment = (commentId: number) => {\n    setIsDeleteError(false);\n\n    service.deleteComment(commentId)\n      .then(() => {\n        setComments(el => el.filter(\n          comment => comment.id !== commentId,\n        ));\n      })\n      .catch(() => {\n        setIsDeleteError(true);\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadComment && (\n            <Loader />\n          )}\n\n          {isLoadError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!comments.length && !isLoadComment && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments.length > 0 && !isLoadComment && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(({\n                body: commentBody,\n                email,\n                id: commentId,\n                name,\n              }) => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={commentId}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                      {name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(commentId)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {commentBody}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {isDeleteError && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Unable to add comment, try again.\n            </p>\n          )}\n\n          {!isForm && !isLoadComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsForm(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isForm && (\n          <NewCommentForm\n            handleCommentAdd={handleCommentAdd}\n            selectedPost={selectedPost}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  handleListDropDown: () => void;\n  selectedUser: User | null;\n  isDropDownList: boolean;\n  setIsDropDownList: (value: boolean) => void;\n  users: User[];\n  handleChoseUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  handleListDropDown,\n  selectedUser,\n  isDropDownList,\n  setIsDropDownList,\n  users,\n  handleChoseUser,\n}) => {\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleListDropDown}\n          onBlur={() => setTimeout(() => setIsDropDownList(false), 210)}\n        >\n          {selectedUser ? (\n            <span>{selectedUser.name}</span>\n          ) : (\n            <span>Choose a user</span>\n          )}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isDropDownList && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div\n            className=\"dropdown-content\"\n          >\n            {users.map(el => (\n              <a\n                href=\"#user-2\"\n                className={cn('dropdown-item', {\n                  'is-active': selectedUser?.id === el.id,\n                })}\n                onClick={() => handleChoseUser(el)}\n              >\n                {el.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport * as service from './utils/api';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDropDownList, setIsDropDownList] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isForm, setIsForm] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    service.getUsers()\n      .then(use => setUsers(use));\n  }, []);\n\n  const handleListDropDown = () => {\n    setIsDropDownList(!isDropDownList);\n  };\n\n  const handleChoseUser = (user: User) => {\n    setSelectedUser(user);\n    setIsLoading(true);\n    setIsDropDownList(false);\n    setSelectedPost(null);\n\n    service.getPosts(user.id)\n      .then(pos => setPosts(pos))\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  handleListDropDown={handleListDropDown}\n                  selectedUser={selectedUser}\n                  isDropDownList={isDropDownList}\n                  setIsDropDownList={setIsDropDownList}\n                  users={users}\n                  handleChoseUser={handleChoseUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {selectedUser && !isLoading && posts.length === 0 && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {selectedUser && posts.length > 0 && !isError && (\n                  <PostsList\n                    posts={posts}\n                    setIsForm={setIsForm}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar', {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  isForm={isForm}\n                  setIsForm={setIsForm}\n                />\n              )}\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}